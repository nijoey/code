Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? 
(The output array does not count as extra space for the purpose of space complexity analysis.)

/*
Algorithm: 
The concept here is take the numtiplication of left and right elements from that position. 

1. In the first loop we have taken multiplicaitons of elements from the left side and stored the results the result array. 
  a. We take the zeroth element as 1 and then multiple all the remaining with the nums array elements. 
2. We define a variable right and initiate it to 1. 
3. Now is the time to take multiplication of the right elements. 
  a. We start with the end and decrement the pointer. 
  b. As we do that we store the result in the res array. 
  c. Then change the right variable to that of the nums array's last element
  
PS: We do this right and left basically to avoid the division of the elements. 

*/
public int[] productExceptSelf(int[] nums) {
    int len = nums.length;
    int[] res = new int[n];
    res[0]=1;
    for(int i=1;i<len;i++){
      res[i]=res[i-1]*nums[i-1];
    }
    
    int right = 1; 
    for(int i=len-1;i>=0;i--){
      res[i] = res[i]*right;
      right = right*nums[i];
    }
    
    return res;
}
